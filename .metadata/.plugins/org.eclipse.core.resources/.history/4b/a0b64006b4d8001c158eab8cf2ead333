package yummypizza.gui;

import java.awt.BorderLayout;
import java.awt.Dialog;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.Window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.GroupLayout.Alignment;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.border.EmptyBorder;

import yummypizza.model.Order2;
import yummypizza.model.Pizza;
import yummypizza.model.product.Base;
import yummypizza.model.product.Sauce;
import yummypizza.model.product.SideOption;
import yummypizza.model.product.Size;
import yummypizza.model.product.Topping;
import yummypizza.repo.OrderList;
import yummypizza.repo.PizzaList;
import javax.swing.SpinnerNumberModel;

public class PizzaMenu extends JDialog {
	
	Order2 order;
	OrderList orders;
	PizzaList pizzas;
	
	private final JPanel contentPanel = new JPanel();

	 /* Create the dialog.
	 */
	public PizzaMenu(Window owner, Dialog.ModalityType modalityType,HashMap<String, Object> map) {
		super(owner, modalityType);
		
		pizzas = (PizzaList) map.get("pizzas");
		order = (Order2) map.get("order");
		
		
		setTitle("Pizza Selection");
		setBounds(100, 100, 658, 434);
		getContentPane().setLayout(new BorderLayout());
		contentPanel.setBorder(new EmptyBorder(5, 5, 5, 5));
		getContentPane().add(contentPanel, BorderLayout.CENTER);
		JLabel lbl_base = new JLabel("Base");
		lbl_base.setFont(new Font("Arial", Font.BOLD, 16));
		
		JComboBox cboBASE = new JComboBox();
		cboBASE.setFont(new Font("Dialog", Font.PLAIN, 14));
		cboBASE.setModel(new DefaultComboBoxModel(Base.descriptions));
		JLabel lbl_size = new JLabel("Size");
		lbl_size.setFont(new Font("Arial", Font.BOLD, 16));
		JLabel lbl_topping = new JLabel("Topping");
		lbl_topping.setFont(new Font("Arial", Font.BOLD, 16));
		JLabel lbl_sauce = new JLabel("Sauce");
		lbl_sauce.setFont(new Font("Arial", Font.BOLD, 16));
		JComboBox cboSIZE = new JComboBox();
		cboSIZE.setFont(new Font("Dialog", Font.PLAIN, 14));
		cboSIZE.setModel(new DefaultComboBoxModel(Size.descriptions));
		JComboBox cboSAUCE = new JComboBox();
		cboSAUCE.setFont(new Font("Dialog", Font.PLAIN, 14));
		cboSAUCE.setModel(new DefaultComboBoxModel(Sauce.descriptions));
		
		JComboBox cboTopping = new JComboBox();
		cboTopping.setFont(new Font("Dialog", Font.PLAIN, 14));
		cboTopping.setModel(new DefaultComboBoxModel(Topping.descriptions));
		
		JSpinner sprQUANTITY = new JSpinner();
		sprQUANTITY.setModel(new SpinnerNumberModel(new Integer(1), new Integer(1), null, new Integer(1)));
		
		JLabel lblNewLabel = new JLabel("Quantity");
		lblNewLabel.setFont(new Font("Arial", Font.BOLD, 16));
		GroupLayout gl_contentPanel = new GroupLayout(contentPanel);
		gl_contentPanel.setHorizontalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGap(81)
					.addComponent(lblNewLabel, GroupLayout.PREFERRED_SIZE, 73, GroupLayout.PREFERRED_SIZE)
					.addGap(6)
					.addComponent(sprQUANTITY, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
					.addGap(109)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(24)
							.addComponent(lbl_size, GroupLayout.PREFERRED_SIZE, 37, GroupLayout.PREFERRED_SIZE)
							.addGap(12)
							.addComponent(cboSIZE, GroupLayout.PREFERRED_SIZE, 199, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(24)
							.addComponent(lbl_base)
							.addGap(15)
							.addComponent(cboBASE, GroupLayout.PREFERRED_SIZE, 222, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(7)
							.addComponent(lbl_sauce, GroupLayout.PREFERRED_SIZE, 55, GroupLayout.PREFERRED_SIZE)
							.addGap(15)
							.addComponent(cboSAUCE, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addComponent(lbl_topping, GroupLayout.PREFERRED_SIZE, 71, GroupLayout.PREFERRED_SIZE)
							.addGap(6)
							.addComponent(cboTopping, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
					.addContainerGap())
		);
		gl_contentPanel.setVerticalGroup(
			gl_contentPanel.createParallelGroup(Alignment.LEADING)
				.addGroup(gl_contentPanel.createSequentialGroup()
					.addGap(285)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(5)
							.addComponent(lblNewLabel))
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(1)
							.addComponent(sprQUANTITY, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))))
				.addGroup(Alignment.TRAILING, gl_contentPanel.createSequentialGroup()
					.addContainerGap(165, Short.MAX_VALUE)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(5)
							.addComponent(lbl_size))
						.addComponent(cboSIZE, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(37)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(5)
							.addComponent(lbl_base))
						.addComponent(cboBASE, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(29)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(5)
							.addComponent(lbl_sauce))
						.addComponent(cboSAUCE, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addGap(29)
					.addGroup(gl_contentPanel.createParallelGroup(Alignment.LEADING)
						.addGroup(gl_contentPanel.createSequentialGroup()
							.addGap(5)
							.addComponent(lbl_topping))
						.addComponent(cboTopping, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
					.addContainerGap())
		);
		contentPanel.setLayout(gl_contentPanel);
		{
			JPanel buttonPane = new JPanel();
			buttonPane.setLayout(new FlowLayout(FlowLayout.RIGHT));
			
			getContentPane().add(buttonPane, BorderLayout.SOUTH);
			{
				JButton okButton = new JButton("Save");
				
				okButton.addMouseListener(new MouseAdapter() {
					@Override
					public void mouseClicked(MouseEvent e) {
						
					}
				});
				
				okButton.addActionListener(new ActionListener() {
					
					@Override
					public void actionPerformed(ActionEvent e) {
						//data transfer from Sting to enum
						//combo box is storing String  
						
						Sauce sauce = Sauce.valueOf((String)cboSAUCE.getSelectedItem()); //data transfer from Sting to enum
						
						Size size = null;
						switch((String)cboSIZE.getSelectedItem()){
							case "8 inch":
								size = Size.small;
							case "11 inch":
								size = Size.large;
							case "12 inch":
								size = Size.extra_large;	
						}
						
						Topping topping = null;
						switch((String)cboTopping.getSelectedItem()){
						case "supreme":
							topping = Topping.supreme;
						case "sauage sizzle":
							topping = Topping.sauage_sizzle;
						case "hawaiian":
							topping = Topping.hawaiian;
						case "sweet chilli chicken":
							topping = Topping.sweet_chilli_chicken;
						case "garden goodness":
						topping = Topping.garden_goodness;
						case "periperi chicken":
							topping = Topping.garden_goodness;
						case "vegan cheese":
							topping = Topping.vegan_cheese;
						}
						Base base = null;
						switch ((String)cboBASE.getSelectedItem()){
						case "traditional":
							base = Base.traditional;
						case "wholemeal":
							base = Base.wholemeal;
						case "gluten free":
							base = Base.gluten;
						}
						
						
						savePizzaDetail(sauce, base, size, topping, 20);
						System.err.println("Pizza save successful");
						
					}
				});
				buttonPane.add(okButton);
				getRootPane().setDefaultButton(okButton);
			}
			
			{
				JButton cancelButton = new JButton("Cancel");
				cancelButton.setActionCommand("Cancel");
				buttonPane.add(cancelButton);
				cancelButton.addMouseListener(new MouseAdapter() {
					@Override
					public void mouseClicked(MouseEvent e) {
						close();
					}
				});
			}
		
	}
	
	private void savePizzaDetail(Sauce sauce, Base base, Size size, Topping topping, int amount) 
	{
		System.out.println("Saving up side menu");
		Pizza pizza = new Pizza();
		
		pizza.setOrderid(order.getOrderid());
		
		//search the order from DB
		Iterator<Pizza> iterator = pizzas.findAll().iterator();
		while(iterator.hasNext()) 
		{
			Pizza myPizza = iterator.next();
			System.err.println("iterator: " + myPizza.toString());
			
			if( null.equals(pizza.getOrderid()) )
			{
			int id = 1 ; 
			pizza.setPizzaid(id);
			pizza.setSauce(sauce);
			pizza.setSize(size);
			pizza.setBase(base);
			pizza.setTopping(topping);
			pizzas.save(pizza);
			}	
			else 
			{
			int id = (int) pizzas.count();
			id++;
			pizza.setPizzaid(id);
			pizza.setSauce(sauce);
			pizza.setSize(size);
			pizza.setBase(base);
			pizza.setTopping(topping);
			pizzas.save(pizza);
			}
		}
	}	
		
	
	private void close() {
        this.setVisible(false);
        this.dispose();}
    
	}
	

}
